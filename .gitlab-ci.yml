stages:
  - build
  - docker
  - kuber

variables:
  VARIABLE_DATA: Gitlab-CI-YAML

build:
  stage: build
  script:
    echo "St1"
docker:
  stage: docker
  image: docker:18-git
  services:
    - docker:18-dind
  script:
    # get node app version from package.json for use in tagging docker image
    - apk update && apk add jq
    - export VERSION=`jq -r ".version" < ./package.json`
    # login to docker
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    # build and tag docker image
    - docker build -t $CI_REGISTRY_IMAGE:$VERSION -t $CI_REGISTRY_IMAGE:latest .
    # publish finished image
    - docker push $CI_REGISTRY_IMAGE:$VERSION
    - docker push $CI_REGISTRY_IMAGE:latest

deploy_kuber:
  image: docker:latest
  services:
  - docker:dind
  stage: kuber
  variables:
    ENV: "test"
.kuber: &kuber
  script:
    - export REGISTRY_BASIC=$(echo -n ${CI_DEPLOY_USER}:${CI_DEPLOY_PASSWORD} | base64)
    - cat ./deploy/namespace.yaml | envsubst | kubectl apply -f -
    - cat ./deploy/secret.yaml | envsubst | kubectl apply -f -
    - cat ./deploy/deployment.yaml | envsubst | kubectl apply -f -
    - cat ./deploy/service.yaml | envsubst | kubectl apply -f -


deploy_kuber:
  image: thisiskj/kubectl-envsubst
  stage: kuber
  variables:
    REPLICAS: 1
    SERVER: "https://test-kuat-ubuntu:6443"
    CA_CERT: $CERT_ODA
    SA_TOKEN: $DEPLOY_SA_TOKEN_ODA
    DEPLOY_SA_NAME: "gitlab"
  before_script:
    - echo "$CA_CERT" > /oda2ca.crt
    - kubectl config set-cluster k8s --server=$SERVER
    - kubectl config set clusters.k8s.certificate-authority /oda2ca.crt
    - kubectl config set-credentials $DEPLOY_SA_NAME --token=$SA_TOKEN
    - kubectl config set-context $ENV --cluster=k8s --user=$DEPLOY_SA_NAME --namespace=${CI_PROJECT_NAME}-${ENV}
    - kubectl config use-context $ENV
    - kubectl config get-contexts
    - kubectl get nodes -o wide
  when: manual
  environment:
    name: ${ENV}
  only:
    - master
  tags:
    - prod-runner
  <<: *kuber
 